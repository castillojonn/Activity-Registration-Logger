{"version":3,"sources":["meteor://ğŸ’»app/imports/api/events/server/publications.js","meteor://ğŸ’»app/imports/startup/server/index.js","meteor://ğŸ’»app/imports/startup/server/register-api.js","meteor://ğŸ’»app/imports/startup/server/security.js","meteor://ğŸ’»app/server/main.js"],"names":["Meteor","module","watch","require","v","_","HTTP","publish","self","publishedKeys","_user","users","findOne","userId","services","google","options","headers","Authorization","accessToken","Exception","url","response","get","each","data","items","item","id","changed","added","ready","error","console","log","deny","update"],"mappings":";;;;;;;;AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,WAAOI,CAAP,EAAS;AAACJ,iBAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;;AAA+D,IAAIC,CAAJ;;AAAMJ,OAAOC,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACE,MAAED,CAAF,EAAI;AAACC,YAAED,CAAF;AAAI;;AAAV,CAA1C,EAAsD,CAAtD;AAAyD,IAAIE,IAAJ;AAASL,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACG,SAAKF,CAAL,EAAO;AAACE,eAAKF,CAAL;AAAO;;AAAhB,CAApC,EAAsD,CAAtD;AAIlJJ,OAAOO,OAAP,CAAe,QAAf,EAAyB,YAAY;AACjC,QAAIC,OAAO,IAAX;AACA,QAAIC,gBAAgB,EAApB;;AAEA,QAAI;AACA,cAAMC,QAAQV,OAAOW,KAAP,CAAaC,OAAb,CAAqB,KAAKC,MAA1B,CAAd;;AAEA,YAAIH,SAASA,MAAMI,QAAf,IAA2BJ,MAAMI,QAAN,CAAeC,MAA9C,EAAsD;AAClD,gBAAIC,UAAU,EAAd;AACAA,oBAAQC,OAAR,GAAkB,EAAlB;AACAD,oBAAQC,OAAR,CAAgBC,aAAhB,GAAgC,YAAYR,MAAMI,QAAN,CAAeC,MAAf,CAAsBI,WAAlE;AACH,SAJD,MAIO;AACH,kBAAM,IAAIC,SAAJ,CAAc,sCAAd,CAAN;AACH;;AAED,YAAIJ,UAAU;AACV,uBAAY;AACR,gCAAgB,kBADR;AAER,iCAAiB,YAAYN,MAAMI,QAAN,CAAeC,MAAf,CAAsBI,WAF3C;AAGR,2CAA2B;AAHnB;AADF,SAAd;AAQA,YAAIE,MAAM,oFAAV;AACA,YAAIC,WAAWhB,KAAKiB,GAAL,CAASF,GAAT,EAAcL,OAAd,CAAf;;AAEAX,UAAEmB,IAAF,CAAOF,SAASG,IAAT,CAAcC,KAArB,EAA4B,UAASC,IAAT,EAAe;AACvC,gBAAIlB,cAAckB,KAAKC,EAAnB,CAAJ,EAA4B;AACxBpB,qBAAKqB,OAAL,CAAa,QAAb,EAAuBF,KAAKC,EAA5B,EAAgCD,IAAhC;AACH,aAFD,MAEO;AACHlB,8BAAckB,KAAKC,EAAnB,IAAyB,IAAzB;AACApB,qBAAKsB,KAAL,CAAW,QAAX,EAAqBH,KAAKC,EAA1B,EAA8BD,IAA9B;AACH;AACJ,SAPD;;AASAnB,aAAKuB,KAAL;AAEH,KAjCD,CAiCE,OAAOC,KAAP,EAAc;AACZC,gBAAQC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAxCD,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA/B,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb;AAAwCF,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb;AAAoCF,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,E;;;;;;;;;;;ACA5EF,OAAOC,KAAP,CAAaC,QAAQ,0BAAR,CAAb;AAAkDF,OAAOC,KAAP,CAAaC,QAAQ,sCAAR,CAAb,E;;;;;;;;;;;ACAlD,IAAIH,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAEX;AACAJ,OAAOW,KAAP,CAAawB,IAAb,CAAkB;AAAEC,UAAQ,MAAM;AAAhB,CAAlB,E;;;;;;;;;;;ACHAnC,OAAOC,KAAP,CAAaC,QAAQ,yBAAR,CAAb,E","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { _ } from 'meteor/underscore';\nimport { HTTP } from 'meteor/http';\n\nMeteor.publish('events', function () {\n    var self = this;\n    var publishedKeys = {};\n\n    try {\n        const _user = Meteor.users.findOne(this.userId);\n\n        if (_user && _user.services && _user.services.google) {\n            var options = {};\n            options.headers = {};\n            options.headers.Authorization = 'Bearer ' + _user.services.google.accessToken;\n        } else {\n            throw new Exception(\"User's google access token not found\");\n        }\n\n        var options = {\n            'headers' : {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + _user.services.google.accessToken,\n                'X-JavaScript-User-Agent': \"Google APIs Explorer\"\n            }\n        };\n\n        var url = 'https://www.googleapis.com/calendar/v3/calendars/capstone.reg.log@gmail.com/events';\n        var response = HTTP.get(url, options);\n\n        _.each(response.data.items, function(item) {\n            if (publishedKeys[item.id]) {\n                self.changed('events', item.id, item);\n            } else {\n                publishedKeys[item.id] = true;\n                self.added('events', item.id, item);\n            }\n        });\n\n        self.ready();\n\n    } catch (error) {\n        console.log(error);\n    }\n});\n","// define collections, publications, and methods that the\n// app provides as API to client\nimport './register-api';\n\n// define a starting set of data if app is loaded with an empty db\nimport './fixtures';\n\n// register security\nimport './security';\n","import '../../api/events/methods';\nimport '../../api/events/server/publications';\n","import { Meteor } from 'meteor/meteor';\n\n// deny all updates to users' profiles\nMeteor.users.deny({ update: () => true });\n","import '/imports/startup/server';\n"]}